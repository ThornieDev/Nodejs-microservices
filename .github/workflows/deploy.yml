

name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # Change to 'master' if your default branch is master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env files for services
        run: |
          mkdir -p api-gateway post-service media-service identity-service search-service
          
          # API Gateway
          echo "PORT=3000" > api-gateway/.env
          echo "NODE_ENV=production" >> api-gateway/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> api-gateway/.env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> api-gateway/.env
          echo "IDENTITY_SERVICE_URL=${{ secrets.IDENTITY_SERVICE_URL }}" >> api-gateway/.env
          echo "POST_SERVICE_URL=${{ secrets.POST_SERVICE_URL }}" >> api-gateway/.env
          echo "MEDIA_SERVICE_URL=${{ secrets.MEDIA_SERVICE_URL }}" >> api-gateway/.env
          echo "SEARCH_SERVICE_URL=${{ secrets.SEARCH_SERVICE_URL }}" >> api-gateway/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> api-gateway/.env

          # Identity Service
          echo "PORT=3001" > identity-service/.env
          echo "NODE_ENV=production" >> identity-service/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> identity-service/.env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> identity-service/.env
          echo "MONGODB_URI=${{ secrets.IDENTITY_MONGO_URI }}" >> identity-service/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> identity-service/.env

          # Post Service
          echo "PORT=3002" > post-service/.env
          echo "NODE_ENV=production" >> post-service/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> post-service/.env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> post-service/.env
          echo "MONGODB_URI=${{ secrets.POST_MONGO_URI }}" >> post-service/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> post-service/.env

          # Media Service
          echo "PORT=3003" > media-service/.env
          echo "NODE_ENV=production" >> media-service/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> media-service/.env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> media-service/.env
          echo "MONGODB_URI=${{ secrets.MEDIA_MONGO_URI }}" >> media-service/.env
          echo "CLOUD_NAME=${{ secrets.CLOUD_NAME }}" >> media-service/.env
          echo "API_KEY=${{ secrets.CLOUD_API_KEY }}" >> media-service/.env
          echo "API_SECRET=${{ secrets.CLOUD_API_SECRET }}" >> media-service/.env

          # Search Service
          echo "PORT=3004" > search-service/.env
          echo "NODE_ENV=production" >> search-service/.env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> search-service/.env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> search-service/.env
          echo "MONGODB_URI=${{ secrets.SEARCH_MONGO_URI }}" >> search-service/.env

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add EC2 host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > ~/.ssh/key-instance.pem
          chmod 600 ~/.ssh/key-instance.pem

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/NodeJS-Microservices
            # generate .env files on EC2
            mkdir -p api-gateway post-service media-service identity-service search-service


              # ---------------------------
              # API Gateway
              # ---------------------------
            echo "PORT=3000" > api-gateway/.env
            echo "NODE_ENV=production" >> api-gateway/.env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> api-gateway/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> api-gateway/.env
            echo "IDENTITY_SERVICE_URL=${{ secrets.IDENTITY_SERVICE_URL }}" >> api-gateway/.env
            echo "POST_SERVICE_URL=${{ secrets.POST_SERVICE_URL }}" >> api-gateway/.env
            echo "MEDIA_SERVICE_URL=${{ secrets.MEDIA_SERVICE_URL }}" >> api-gateway/.env
            echo "SEARCH_SERVICE_URL=${{ secrets.SEARCH_SERVICE_URL }}" >> api-gateway/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> api-gateway/.env

            # Repeat similar steps for identity-service, post-service, media-service, search-service
            # ...

            # ---------------------------
            # Identity Service
            # ---------------------------
            echo "PORT=3001" > identity-service/.env
            echo "NODE_ENV=production" >> identity-service/.env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> identity-service/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> identity-service/.env
            echo "MONGODB_URI=${{ secrets.IDENTITY_MONGO_URI }}" >> identity-service/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> identity-service/.env


            # ---------------------------
            # Post Service
            # ---------------------------
            echo "PORT=3002" > post-service/.env
            echo "NODE_ENV=production" >> post-service/.env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> post-service/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> post-service/.env
            echo "MONGODB_URI=${{ secrets.POST_MONGO_URI }}" >> post-service/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> post-service/.env


            # ---------------------------
            # Media Service
            # ---------------------------
            echo "PORT=3003" > media-service/.env
            echo "NODE_ENV=production" >> media-service/.env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> media-service/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> media-service/.env
            echo "MONGODB_URI=${{ secrets.MEDIA_MONGO_URI }}" >> media-service/.env
            echo "CLOUD_NAME=${{ secrets.CLOUD_NAME }}" >> media-service/.env
            echo "API_KEY=${{ secrets.CLOUD_API_KEY }}" >> media-service/.env
            echo "API_SECRET=${{ secrets.CLOUD_API_SECRET }}" >> media-service/.env

              # ---------------------------
            # Search Service
            # ---------------------------
            echo "PORT=3004" > search-service/.env
            echo "NODE_ENV=production" >> search-service/.env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> search-service/.env
            echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> search-service/.env
            echo "MONGODB_URI=${{ secrets.SEARCH_MONGO_URI }}" >> search-service/.env

            # Pull latest code and restart containers

            git pull origin main
            docker-compose down
            docker-compose up -d

      - name: Debug SSH connection (optional)
        run: |
          ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} "echo 'SSH connection successful'"
        continue-on-error: true

















# name: Deploy to AWS EC2

# on:
#   push:
#     branches:
#       - main  # or master if your default branch is master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Install Docker Compose
#         run: |
#           sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose
#           docker-compose --version

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker images
#         run: |
#           docker-compose -f docker-compose.yml build
#           docker-compose -f docker-compose.yml push

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Add EC2 host key
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H ${{ secrets.AWS_EC2_IP }} >> ~/.ssh/known_hosts

#       - name: Set up SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.AWS_EC2_SSH_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa

#       - name: Deploy on EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.AWS_EC2_IP }}
#           username: ubuntu
#           key: ${{ secrets.AWS_EC2_SSH_KEY }}
#           port: 22
#           script: |
#             cd ~/NodeJS-Microservices
#             git pull origin main
#             docker-compose down
#             docker-compose up -d

#       - name: Debug SSH connection (optional)
#         run: |
#           ssh -v -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_EC2_IP }} "echo 'SSH connection successful'"
#         continue-on-error: true






















# name: Deploy to VPS
# on:
#   push:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Install Docker Compose
#         run: |
#           sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose
#           docker-compose --version

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker images
#         run: |
#           docker-compose -f docker-compose.yml build
#           docker-compose -f docker-compose.yml push

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Add VPS SSH host key to known_hosts
#         run: |
#           mkdir -p ~/.ssh
#           ssh-keyscan -H 62.72.30.37 >> ~/.ssh/known_hosts

#       - name: Set up SSH key for authentication
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa

#       - name: SSH into VPS and deploy
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: 62.72.30.37
#           username: root
#           key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             cd /home/root/projects/nodejsfullcourse/NodeJS-Microservices
#             git pull origin master
#             docker-compose down
#             docker-compose up -d

#       - name: Debug SSH connection (optional)
#         run: |
#           ssh -v -i ~/.ssh/id_rsa root@62.72.30.37 "echo 'SSH connection successful'"
#         continue-on-error: true
